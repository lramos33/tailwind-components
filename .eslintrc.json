{
  "extends": ["next/core-web-vitals", "plugin:@typescript-eslint/recommended", "plugin:tailwindcss/recommended"],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint", "tailwindcss"],
  "rules": {
    // Warn when console statements are used
    "no-console": "warn",

    // Enforce the use of the `import type` syntax for type imports
    "@typescript-eslint/consistent-type-imports": "error",

    // Disallow unused variables (with some exceptions)
    "@typescript-eslint/no-unused-vars": [
      "warn",
      {
        "vars": "all",
        "args": "after-used",
        "ignoreRestSiblings": false,
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_",
        "caughtErrorsIgnorePattern": "^_"
      }
    ],

    // Enforce consistent naming for boolean props (should start with 'is', 'has', or 'should')
    "react/boolean-prop-naming": ["error", { "rule": "^(is|has|should)[A-Z]([A-Za-z0-9]?)+" }],

    // Prevent usage of dangerous JSX props
    "react/no-danger": "error",

    // Prevent multiple component definitions in a single file
    "react/no-multi-comp": ["error"],

    // Enforce consistent usage of destructuring assignment of props, state, and context
    "react/destructuring-assignment": ["error", "always"],

    // Enforce that props are read-only
    "react/prefer-read-only-props": "error",

    // Enforce consistent React fragment syntax
    "react/jsx-fragments": ["error", "syntax"],

    // Prevent usage of unsafe `target='_blank'` without `rel="noopener noreferrer"`
    "react/jsx-no-target-blank": "error",

    // Enforce PascalCase for user-defined JSX components
    "react/jsx-pascal-case": "error",

    // Disallow unnecessary curly braces in JSX props and children
    "react/jsx-curly-brace-presence": ["error", { "props": "never", "children": "never" }],

    // Enforce a specific function type for function components
    "react/function-component-definition": [
      "error",
      {
        "namedComponents": "function-declaration",
        "unnamedComponents": "arrow-function"
      }
    ],

    // Enforce a convention in the order of import statements
    "import/order": [
      "error",
      {
        "groups": ["builtin", "external", "internal", "parent", "sibling", "index"],
        "newlines-between": "always",
        "alphabetize": { "order": "asc", "caseInsensitive": true }
      }
    ],

    // Ensure consistent use of file extension within the import path
    "import/extensions": [
      "error",
      "ignorePackages",
      {
        "ts": "never",
        "tsx": "never",
        "js": "never",
        "jsx": "never"
      }
    ],

    // Enforce using `@/` alias for imports from the `src/` directory
    "no-restricted-imports": [
      "error",
      {
        "patterns": [
          {
            "group": ["../*"],
            "message": "Usage of relative parent imports is not allowed. Use `@/` alias instead."
          }
        ]
      }
    ],

    // Enforce a consistent order for Tailwind CSS classes
    "tailwindcss/classnames-order": "error",

    // Warn about custom class names that are not defined in the Tailwind config
    "tailwindcss/no-custom-classname": "warn",

    // Prevent using contradicting Tailwind CSS classes together
    "tailwindcss/no-contradicting-classname": "error"
  }
}
